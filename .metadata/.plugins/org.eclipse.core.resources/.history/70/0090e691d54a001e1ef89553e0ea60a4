package com.shopping.model.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.shopping.model.bean.Member;

public class MemberDao extends SuperDao{
	public Member getDataByPk(String id) {
		Member bean = new Member(id, "김호철", "abc123", "female", "2023/08/20", "미혼", 
				100, "역삼", "kim9", "탁구,축구,");
		
		return bean;
	}
	
	// 회원 목록 보기 기능) 회원 전체 목록을 반환해 줍니다.
	public List<Member> getDataList(){
		List<Member> datalist = new ArrayList<Member>() ;
		
		datalist.add(new Member("kimho", "김호철", "abc123", "female", "2023/08/20", "미혼", 100, "마포", "kim9", "탁구,축구,"));
		datalist.add(new Member("park", "박혁신", "abc123", "male", "2002/06/24", "미혼", 200, "용산", "kim9", "농구,배구,"));		
		datalist.add(new Member("choi", "최만위", "abc123", "female", "2020/12/12", "이혼", 300, "강남", "soon", "농구,배구,"));		
		datalist.add(new Member("kim", "김동섭", "abc123", "male", "2023/08/20", "결혼", 400, "마포", "soon", "탁구,축구,"));
		datalist.add(new Member("lee", "이수돌", "abc123", "male", "2023/08/20", "이혼", 500, "서대문", "kim9", "탁구,축구,"));
		
		return datalist ;
	}

	public Member getDataByPk(String id, String password)throws Exception {
		Member bean = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		//
		
		/* ?를 placeholder(one base)라고 합니다. 치환되어야 할 영역, 값 
		   executeQuery문 보다 위에서 바꿔야함*/
		String sql = " select * from members";
		sql += " where id = ? and password = ?";
		
		conn =super.getConnection(); // 단계 02
		pstmt = conn.prepareStatement(sql); // 단계 03
		
		
		pstmt.setString(1, id);	
		pstmt.setString(2, password);	
		
		// 로그인 오류 발생 지점		
		rs = pstmt.executeQuery(); // 단계 04-01		
		
		if(rs.next()) { // 1건이 조회됨
			bean = getBeanData(rs);
		}
		
		// 단계 05
		if(rs != null) {rs.close();}
		if(pstmt != null) {pstmt.close();}
		if(conn != null) {conn.close();}
		
		return bean;
	}

	private Member getBeanData(ResultSet rs)throws Exception {
		// ResultSet의 데이터를 읽어서 Bean에 기록한 다음, 반환해 줍니다.
		Member bean=  new Member();		
		bean.setId(rs.getString("id"));		
		bean.setName(rs.getString("name"));
		bean.setPassword(rs.getString("password"));
		bean.setGender(rs.getString("gender"));
		
		bean.setBirth(String.valueOf(rs.getDate("birth"))); // 날짜 입력 방법. 시분초 짤림. 
		
		bean.setMarriage(rs.getString("marriage"));
		bean.setSalary(rs.getInt("salary"));
		bean.setAddress(rs.getString("address"));
		bean.setManager(rs.getString("manager"));
		
		return bean;
	}

	// DML
	public int InsertData(Member bean) throws Exception{
		System.out.println(bean);
		// Bean 객체 정보를 이용하여 데이터 베이스에 추가합니다.
		int cnt = -1;
		// sql문에 들어갈 때 오류를 방지하기 위해 한 칸씩 스페이스
		String sql = " insert into members(id, name, password, gender, birth, marriage, salary, address, manager)";
		sql += " values(?,?,?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;
		
		conn = super.getConnection();
		conn.setAutoCommit(false);
		
		pstmt = conn.prepareStatement(sql);
		
		// id, name, password, gender, birth, marriage, salary, address, manager
		pstmt.setString(1, bean.getId());
		pstmt.setString(2, bean.getName());
		pstmt.setString(3, bean.getPassword());
		pstmt.setString(4, bean.getGender());
		pstmt.setString(5, bean.getBirth());
		pstmt.setString(6, bean.getMarriage());
		pstmt.setInt(7, bean.getSalary());
		pstmt.setString(8, bean.getAddress());
		pstmt.setString(9, bean.getManager());
		
		cnt = pstmt.executeUpdate();
		conn.commit();
		
		if(pstmt != null) {pstmt.close();}
		if(conn != null) {pstmt.close();}
		
		return cnt;
	}
}